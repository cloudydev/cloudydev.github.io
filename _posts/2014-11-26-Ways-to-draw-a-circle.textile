---
layout: post
title: Ways to draw a circle
customjs:
  - /3rd/threejs/three.min.js
---

h1. Ways to draw a circle

h2. 三角函数(Trigonometry)

{% highlight js %}
for (var degrees = 1; degrees <=360; degrees++){
    radians = degrees * 2 * 3.14159 / 360;

    x = Math.cos(radians);
    y = Math.sin(radians);
}
{% endhighlight %}

h2. Polynomial Approximation

{% highlight js %}
for (t = 0; t <= 1; t += 0.01){
    x = 1 + t * t * (-1.344 + 0.344 * t);
    y = t * (1.656 - t * (0.312 + 0.344 * t))
}
{% endhighlight %}

<canvas id="canvas-circle-0" width="300" height="300"></canvas>
<script>
$(function(){
    var scene = new THREE.Scene();
    var camera = new THREE.PerspectiveCamera( 75, 1, 0.1, 10 );

    var renderer = new THREE.WebGLRenderer({canvas : document.getElementById("canvas-circle-0")});

    var geometry = new THREE.Geometry();
    var material = new THREE.MeshBasicMaterial( { color: 0x000000 } );

    for (t = 0; t <= 1; t += 0.01){
        x = 1 + t * t * (-1.344 + 0.344 * t);
        y = t * (1.656 - t * (0.312 + 0.344 * t))
        geometry.vertices.push(new THREE.Vector3(x, y, 0));
    }
    
    for (t = 0; t <= 1; t += 0.01){
        x = 1 + t * t * (-1.344 + 0.344 * t);
        y = t * (1.656 - t * (0.312 + 0.344 * t))
        geometry.vertices.push(new THREE.Vector3(x, y, 0));
    }

    var line = new THREE.Line(geometry, material);
    scene.add(line);
    camera.position.z = 2;

    var render = function () {
        requestAnimationFrame( render );
        renderer.setClearColor(0xffffff, 1);
        renderer.render(scene, camera);
    };

    render();
});
</script>
