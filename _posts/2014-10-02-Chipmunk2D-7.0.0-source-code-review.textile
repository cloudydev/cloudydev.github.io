---
layout: post
title: Chipmunk2D Version 7.0.0 代码实现
---

h1. 工程结构

代码取自 Chipmunk2D 的 ["GitHub仓库":https://github.com/slembcke/Chipmunk2D] 的master branch，最新的开发版本是7.0.0，真正有用的代码在 include 和 src 文件夹下面，代码量不到1w行:

<pre class="table">
[roc : Chipmunk2D]$: cloc include/ src/
      55 text files.
      55 unique files.
       0 files ignored.

http://cloc.sourceforge.net v 1.60  T=0.37 s (148.6 files/s, 34996.2 lines/s)
-----------------------------------------------------------------------------------
Language                files             blank           comment           code
-----------------------------------------------------------------------------------
C                       28                1654            991               6469
C/C++ Header            26                698             1246              1844
CMake                   1                 4               7                 37
-----------------------------------------------------------------------------------
SUM:                    55                2356            2244              8350
-----------------------------------------------------------------------------------
</pre>

p. 

用Xcode打开，源代码根据用途分成Basics, Collision, Constraints, Space四个模块:

<div class="figure">
<img src="\data\img_chipmunk_7_xcode.png">
</div>

p.  

h1. 基本数据结构

Basics 下面是 Chipmunk2D 里面用到的基本数据结构，包括：

存储容器：数组（cpArray.c）和哈希表（cpHashSet.h）
数学运算：向量（cpVect.h）、AABB包围体（cpBB.h）、和变换矩阵（cpTransform.h）

p. 

h1. 物体和形状

Chipmunk2D 里定义了三种物体类型：

{% highlight  C %}
typedef enum cpBodyType {
    CP_BODY_TYPE_DYNAMIC,
    CP_BODY_TYPE_KINEMATIC,
    CP_BODY_TYPE_STATIC,
} cpBodyType;
{% endhighlight %}

p.  

* DYNAMIC：有一定质量的物体，外力施加到上面或发生碰撞时会改变运动状态
* STATIC：静态物体，其质量无穷大，位置固定，速度为 0 的物体，而且不会因为外力作用或者碰撞而改变运动状态
* KINEMATIC：运动学物体，同静态物体类似，不响应外力作用和碰慌效果，但是有一定质量，自身可以有速度的物体

Chipmunk2D 定义了三种形状类型：

{% highlight  C %}
typedef enum cpShapeType{
    CP_CIRCLE_SHAPE,
    CP_SEGMENT_SHAPE,
    CP_POLY_SHAPE,
    CP_NUM_SHAPES
} cpShapeType;
{% endhighlight %}

p.  

h1. 物体之间的碰撞

两个具体形状之间的碰撞检测函数定义成如下形式：

{% highlight  C %}
typedef void (*CollisionFunc)(const cpShape *a,
                              const cpShape *b,
                              struct cpCollisionInfo *info);
{% endhighlight %}

p.  

不同形状之间的碰撞函数存在一个函数指针数组里面，并按照两个形状的类型枚举值进行寻址 (这里是把枚举小的放到 \(type_a\) ):
$$ index = type_a + type_b \cdot \text{CP_NUM_SHAPES};$$

<pre class="table">
  -------------------------------------------------------------------------
  | type             | CP_CIRCLE_SHAPE | CP_SEGMENT_SHAPE | CP_POLY_SHAPE |
  -------------------------------------------------------------------------
  | CP_CIRCLE_SHAPE  | CircleToCircle  | x                | x             |
  | CP_SEGMENT_SHAPE | CircleToSegment | SegmentToSegment | x             |
  | CP_POLY_SHAPE    | CircleToPoly    | SegmentToPoly    | PolyToPoly    |
  -------------------------------------------------------------------------
</pre>

p.  

h1. 物体空间（世界）

cpSpace 是存储所有物体的容器，作为物体之间发生碰撞的环境（代码只贴了一部分，其他成员在下文会有介绍）：

p.  

{% highlight  C %}
"定义在cpSpace.h, cpSpace.c"
struct cpSpace {
    //当前世界的时间
    cpTimestamp stamp;
    
    //世界中所有动态物体列表 
    cpArray *dynamicBodies;
    //所有静态物体列表
    cpArray *staticBodies;
	
    //动态物体的加速结构
    cpSpatialIndex *staticShapes;
    //静态物体的加速结构
    cpSpatialIndex *dynamicShapes;
};
{% endhighlight %}

p. 

h1. 空间的更新

time step是最重要的部分，实现在 cpSpaceStep.c 里：

{% highlight  C %}
void
cpSpaceStep(cpSpace *space, cpFloat dt)
{
    /* 1 初始化 */
    /* 2 位置积分 */
    /* 3 碰撞检测 */
    /* 4 休眠检测 */
    /* 5 约束求解-常量部分 */
    /* 6 速度积分 */
    /* 7 叠加缓存冲量 */
    /* 8 约束求解-迭代部分 */
}
{% endhighlight %}

p.  

h2. 初始化

p. 

{% highlight  C %}
if(dt == 0.0f) return;

// 初始化相关变量

// 更新碰撞对状态
for(int i=0; i<arbiters->num; i++){
    cpArbiter *arb = (cpArbiter *)arbiters->arr[i];
    arb->state = CP_ARBITER_STATE_NORMAL;
            
    // 删除无效的碰撞对
    if(!cpBodyIsSleeping(arb->body_a) && !cpBodyIsSleeping(arb->body_b)){
        cpArbiterUnthread(arb);
    }
}
arbiters->num = 0;
{% endhighlight %}

p.  

h2. 位置，速度积分

物体的位置和速度的积分逻辑被封装成了对应的函数，作为Body结构的成员之一：

{% highlight  C %}
struct cpBody {
    cpBodyVelocityFunc velocity_func;
    cpBodyPositionFunc position_func;
}
{% endhighlight %}

Chipmunk2D 对这部分的积分用了最简单的["欧拉积分":http://en.wikipedia.org/wiki/Euler_method] ，对位置的积分放到了速度积分的前面(?)。

%{color:RED}TODO%
位置和速度积分的位置顺序的作用?

h2. 碰撞检测

p. 整个碰撞检测的流程很简单：

{% highlight  C %}
cpSpaceLock(space); {
    /* 
    2 位置积分
    */
    
    /* 
    3 碰撞检测
    */
    // 3.1 创建 Contact Buffer
    cpSpacePushFreshContactBuffer(space);
    
    // 3.2 计算物体的AABB, 更新加速结构*/
    cpSpatialIndexEach(space->dynamicShapes,
                      (cpSpatialIndexIteratorFunc)cpShapeUpdateFunc,
                      NULL);
   
    // 3.3 Broad Phase 检索碰撞对
    // 3.4 cpSpaceCollideShapes 回调，Narrow Phase 碰撞检测
    cpSpatialIndexReindexQuery(space->dynamicShapes,
                      (cpSpatialIndexQueryFunc)cpSpaceCollideShapes, 
                      space);
} cpSpaceUnlock(space, cpFalse);
{% endhighlight %}

p. 

* 加速结构

p.  Chipmunk2D 里的加速结构需要实现 **cpSpatialIndexClass** 里声明的函数以提供基本的遍历、添加、删除、更新、碰撞查询操作，目前的版本中，Chipmunk2D 提供了三种加速结构：

* X 轴向上的 Sweep and Prone，实现在 cpSweep1D.c 里
* 空间网格划分，实现在 cpSpatialHash.c 里
* 体积树，Chipmunk2D 里默认使用的结构，实现在 cpBBTree.c 里

{% highlight  C %}
"完整定义和函数指针的声明参见 cpSpatialIndex.h"
struct cpSpatialIndexClass {
    // 更新加速结构
    cpSpatialIndexReindexImpl reindex;

    // 物体因为运动导致 AABB 发生改变，调用此函数更新加速结构
    cpSpatialIndexReindexObjectImpl reindexObject;

    // broad phase 碰撞对查询，以回调的方式处理查询输出的碰撞对
    cpSpatialIndexReindexQueryImpl reindexQuery;
};
{% endhighlight %}

p. 

* Broad Phase

p.  

* Narrow Phase

p.  

* Contact Buffer

首先，在 cpSpace 里定义了一个碰撞对的生命周期，超过生命周期的碰撞对就会被删除掉

{% highlight  C %}
struct cpSpace {
    cpTimestamp collisionPersistence;	
}
{% endhighlight %}


由于碰撞检测过程中会生成很多触点的数据，需要在碰撞检测之间创建一个足够大的 buffer 来存储触点数据，chipmunk 用了一个环形的链表作为存储触点buffer，由于我们只考虑在生命周期內的碰撞对，所以这个环形链表只需要 collisionPersistence  个结点就足够了：

p. 

{% highlight  C %}
void
cpSpacePushFreshContactBuffer(cpSpace *space)
{
    cpTimestamp stamp = space->stamp;
    
    cpContactBufferHeader *head = space->contactBuffersHead;
    
    if(!head){
        // 分配一个存储节点当做头结点
    } else if(stamp - head->next->stamp > space->collisionPersistence){
        // 头结点和尾结点的时间差超过了碰撞生命周期，可以被重复利用 
        cpContactBufferHeader *tail = head->next;
        space->contactBuffersHead = cpContactBufferHeaderInit(tail, stamp, tail);
    } else {
        // 分配一个新的存储结点
    }
}
{% endhighlight %}


p.  

* 计算触点

%{color:RED}TODO%

p. 

h2. 休眠检测

物体睡眠相关的实现在cpSpaceComponent.c里面，在cpSpace结构体里定义了两个阀值:

{% highlight  C %}
struct cpSpace {
    cpFloat idleSpeedThreshold;
    cpFloat sleepTimeThreshold;
}
{% endhighlight %}
p.  

* idleSpeedThreshold: 速度阀值，当物体的速度小于这个值时，可以近似的认为这个物体是静止的。
* sleepTimeTreshold: 时间阀值，当物体保持静止的时间超过这个值时，我们认为这个物体是处于静止状态。

p.  

{% highlight  C %}
void
cpSpaceStep(cpSpace *space, cpFloat dt)
{
    /* 
    4 睡眠检测: 
    */
    cpSpaceProcessComponents(space, dt);
    {
        cpBool sleep = (space->sleepTimeThreshold != INFINITY);
        cpArray *bodies = space->dynamicBodies;
        
        // 4.1 更新静止时间
	// 4.2 唤醒受到干扰的物体
        // 4.3 创建contact graph
        // 4.4 休眠满足条件的物体
    }
}
{% endhighlight %}

p. 

h3. 静止时间

p. 

chipmunk对于静止状态的判定是根据物体动能的大小，根据 cpSpace 里定义的速度阀值，可以计算出每个物体的最小动能，当物体的动能低于这个最小值时，累积它的静止时间：

p. 

{% highlight  C %}
if(sleep){
    // 4.1 更新静止时间
    cpFloat dv = space->idleSpeedThreshold;
    cpFloat dvsq = (dv ? dv*dv : cpvlengthsq(space->gravity)*dt*dt);
		
    for(int i=0; i<bodies->num; i++){
        cpBody *body = (cpBody*)bodies->arr[i];
			
	if(cpBodyGetType(body) != CP_BODY_TYPE_DYNAMIC) continue;
			
	cpFloat keThreshold = (dvsq ? body->m*dvsq : 0.0f);
	ody->sleeping.idleTime = (cpBodyKineticEnergy(body) > keThreshold ?
                                      0.0f : body->sleeping.idleTime + dt);
    }
}
{% endhighlight %}

p.  

h3. Contact graph

考虑到物体之间的碰撞作用，当有多个物体参与了碰撞时，即使其中一个物体达到了休眠的条件，我们也无法简单的就将这个物体休眠掉。比如下图这种情况：

A 与 B 发生碰撞，B 和 C 之间有接触碰撞，虽然 C 物体已经满足休眠条件，但是 A 与 B 碰撞之后必定会改变 C 物体的状态，因此 C 物体在下一帧时会重新被唤醒，这种情况下的休眠就没有什么意义了。

因此，一个动态物体进入休眠状态需要两个条件：

* 这个物体要处于静止状态
* 与这个物体有 %{color:RED}接触关系% (包括碰撞接触和约束关系) 的物体都处于静止状态。

更进一步说，当满足上述条件时，有接触关系的一族物体都可以进入休眠状态。我们把物体当作节点，接触关系当作边，很容易用一张图来表示物体之间的接触关系，这个就是 contact graph。

<div class="figure">
<img src="/data/contact_graph.png">
</div>

Chipmunk2D 用邻接表来实现这张 contact graph: cpBody 的结构体里定义了一个 sleeping 结构体来存储接触关系，每个物体的实例里面都缓存了一份与这个物体有关的碰撞对列表 **arbiterList** 和约束列表 **constraintList**

{% highlight  C %}
struct cpBody {
    cpArbiter *arbiterList;
    cpConstraint *constraintList;
      
    struct {
        cpBody *root;
	cpBody *next;
    	cpFloat idleTime;
    } sleeping;
};
{% endhighlight %}

p.  

创建contact graph的过程很简单，只需要 DFS 遍历 arbiterList 和 constrainList 即可:

{% highlight  C %}
for(int i=0; i<bodies->num;){
    cpBody *body = (cpBody*)bodies->arr[i];
    
    // 4.3 创建contact graph
    if(ComponentRoot(body) == NULL){
        // 以 body 为根节点，DFS 生成 contact graph
        FloodFillComponent(body, body);
       
        // 遍历这张 contact graph，判断是否满足休眠条件
        if(!ComponentActive(body, space->sleepTimeThreshold)){
            cpArrayPush(space->sleepingComponents, body);

            // 4.4 休眠满足条件的物体
            CP_BODY_FOREACH_COMPONENT(body, other) 
                cpSpaceDeactivateBody(space, other);
            
            continue;
        }
    }
    
    i++;
    
    body->sleeping.root = NULL;
    body->sleeping.next = NULL;
}
{% endhighlight %}


p.  

h3. 物体的休眠

p. 让一个动态物体进入休眠状态是暂时把这个物体当作"静态物体"来看待，因为静态物体只会被动的参与碰撞，这样就省掉了这个物体与其他物体碰撞检测的 CPU 运算。

{% highlight  C %}
static void
cpSpaceDeactivateBody(cpSpace *space, cpBody *body)
{
    // 把物体从 space 的动态物体列表中移除
    cpArrayDeleteObj(space->dynamicBodies, body);
    
    // 把物体所包含的所有形状，从动态加速体里移除并添加到静态加速体中
    CP_BODY_FOREACH_SHAPE(body, shape){
        cpSpatialIndexRemove(space->dynamicShapes, shape, shape->hashid);
        cpSpatialIndexInsert(space->staticShapes, shape, shape->hashid);
    }
    
    // 把休眠物体之间的碰撞对和约束从space的缓存中删除
    CP_BODY_FOREACH_ARBITER(body, arb){
        /* implement */
    }
            
    CP_BODY_FOREACH_CONSTRAINT(body, constraint){
        /* implement */
    }
}
{% endhighlight %}

p.  

h3. 物体的唤醒

p.  

不幸的是，物体显然不会一直的休眠下去，总会有一些外界的干扰会把它从休眠状态唤醒，这里的干扰包括：

* 有其他正在活动的物体发生了碰撞
* 与 **kinematic** 物体有接触
* 游戏逻辑强制唤醒一个物体

{% highlight  C %}
// 4.2 唤醒受到干扰的物体
cpArray *arbiters = space->arbiters;
for(int i=0, count=arbiters->num; i<count; i++){
    if (sleep) {
       // 唤醒与kinematic物体碰撞的物体
    }
}

if(sleep){
    cpArray *constraints = space->constraints;
    for(int i=0; i<constraints->num; i++){
       // 唤醒与kinematic物体有约束关系的物体
    }

    // 4.3 创建contact graph
    // 4.4 休眠满足条件的物体
}
{% endhighlight %}

p.  

唤醒一个物体的过程和休眠的过程类似，只是把相关的操作反向执行一次：

{% highlight  C %}
void
cpSpaceActivateBody(cpSpace *space, cpBody *body)
{
    // 把物体添加到 space 的动态物体列表中
    cpArrayPush(space->dynamicBodies, body);

    // 把物体所包含的所有形状，从静态加速体里移除并添加到动态加速体中
    CP_BODY_FOREACH_SHAPE(body, shape){
            cpSpatialIndexRemove(space->staticShapes, shape, shape->hashid);
            cpSpatialIndexInsert(space->dynamicShapes, shape, shape->hashid);
    }
    
    // 把休眠物体之间的碰撞对和约束添加到space的缓存中
    CP_BODY_FOREACH_ARBITER(body, arb){
        /* implement */
    }
    
    CP_BODY_FOREACH_CONSTRAINT(body, constraint){
        /* implement */
    }
}
{% endhighlight %}

p.  

h2. 约束求解

约束求解的部分被分成了两个步骤, 常量计算部分和迭代计算部分，两个步骤之间插入了一步速度积分的过程

{% highlight  C %}
void
cpSpaceStep(cpSpace *space, cpFloat dt)
{
    cpSpaceLock(space); {
    /* 约束求解-常量部分 */
        // 5.1 过滤无效碰撞体
        cpHashSetFilter(space->cachedArbiters, 
          (cpHashSetFilterFunc)cpSpaceArbiterSetFilter,
          space);
  
        // 5.2 求解碰撞方程，常量部分
        cpFloat slop = space->collisionSlop;
	cpFloat biasCoef = 1.0f - cpfpow(space->collisionBias, dt);
	for(int i=0; i<arbiters->num; i++){
            cpArbiterPreStep((cpArbiter *)arbiters->arr[i], dt, slop, biasCoef);
      	}

        // 5.3 求解自定义约束方程，常量部分
        for(int i=0; i<constraints->num; i++){
	    cpConstraint *constraint = (cpConstraint *)constraints->arr[i];
            // ... 
	    constraint->klass->preStep(constraint, dt);
      	}
    /* 速度积分 */

    /* 施加缓存冲量*/ 

    /* 约束求解-迭代部分*/
        for(int i=0; i<space->iterations; i++){
            // 8.1 求解碰撞方程，迭代部分
	    for(int j=0; j<arbiters->num; j++){
		cpArbiterApplyImpulse((cpArbiter *)arbiters->arr[j]);
	    }
	    
            // 8.2 求解自定义约束方程,迭代部分
	    for(int j=0; j<constraints->num; j++){
		cpConstraint *constraint = (cpConstraint *)constraints->arr[j];
		constraint->klass->applyImpulse(constraint, dt);
            }
	}
    } cpSpaceUnlock(space, cpTrue);
}
{% endhighlight %}

p.  

h3. 过滤无效碰撞体

p. 

一个碰撞体，如果一个碰撞对的碰撞持续时间超过了预定义的阀值，这个碰撞对就被定义为失效，不需要进行处理：

{% highlight  C %}
cpBool
cpSpaceArbiterSetFilter(cpArbiter *arb, cpSpace *space)
{       
    // 统计碰撞体的持续时间
    cpTimestamp ticks = space->stamp - arb->stamp;
    cpBody *a = arb->body_a, *b = arb->body_b;
    
    /* ... */

    // 持续时间超过阀值，碰撞对已经失效
    if(ticks >= space->collisionPersistence){
        // 回收这个碰撞对的内存
        arb->contacts = NULL;
	arb->count = 0;
		
	cpArrayPush(space->pooledArbiters, arb);
	return cpFalse;
    }
    return cpTrue;
}
{% endhighlight %}

p.  

h3. 碰撞方程-常量部分

理解这部分的关键时下面的碰撞方程：根据当前速度和弹性系数计算碰撞发生瞬间产生的冲量 \(\vec{J}\)

$$
\vec{J} = K^{-1} \cdot (1 + e) \cdot \Delta \vec{u}_{(t, \vec{n})} \\
K = M_{Body_1}^{-1} + M_{Body_2}^{-1} + 
[ 
I_1^{-1} \cdot (\vec{r_1} \times \vec{n}) \times \vec{r_1} +
I_2^{-1} \cdot (\vec{r_2} \times \vec{n}) \times \vec{r_2}
] 
\cdot \vec{n}
$$


* con->nMass 代表上面公式中的 \(K\) ，对于迭代求解的算法中，这部分是常量，因此单独把这一部分的计算放到了前面
* con->bounce 是上面公式中的 \( e \cdot \Delta \vec{u}_{(t, \vec{n})} \)

p.  

{% highlight  C %}
void
cpArbiterPreStep(cpArbiter *arb, cpFloat dt, cpFloat slop, cpFloat bias)
{
    cpBody *a = arb->body_a;
    cpBody *b = arb->body_b;
    cpVect n = arb->n;
    cpVect body_delta = cpvsub(b->p, a->p);
	
    for(int i=0; i<arb->count; i++){
	struct cpContact *con = &arb->contacts[i];
        // 计算mMass, tMass, bias, jBias, bounce
    }
}
{% endhighlight %}

p. 


h3. 碰撞方程-迭代部分

p.  

**cpArbiterApplyImpulse** 中计算上面公式中的冲量 \(\vec{J}\)，然后施加到物体上，立即改变物体的速度状态：

p. 

{% highlight  C %}
void
cpArbiterApplyImpulse(cpArbiter *arb)
{
    // setup variable ... 
  
    for(int i=0; i<arb->count; i++){
        struct cpContact *con = &arb->contacts[i];
        // 计算碰撞方向上的冲量jn, 摩擦力方向的冲量jt，Bias冲量jBias
        // 更新con->jnAcc, con->jtAcc, con->jBias
        // 将冲量作用到物体上
        apply_bias_impulses( /* params */ );
        apply_impulses( /* params */ );
    }
}
{% endhighlight %}

p. 

关于这里的迭代算法，可以参考Thomas Jakobsen 的 Advanced Character Physics。
