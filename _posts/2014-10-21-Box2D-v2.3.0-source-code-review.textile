---
layout: post
title: Box2D Version 2.3.0 代码实现
---

h1. 工程结构

代码取自 ["Box2D.org":http://box2d.org/downloads/] , 目前的最新版本是2.3.0, 工程结构比较简单，打开位于 Build/xcode5 下的工程：

<div class="figure">
<img src="\data\Box2D-Xcode-project.png">
</div>

整个工程有两个主要的build target：
* 库文件libBox2D.a
* 可执行程序Testbed，包含几乎所有Box2D功能的DEMO和测试集合，如果想了解Box2D的使用，这部分的代码是最好的资料

引擎部分的源码放置在Box2D文件夹下面，代码体积1.3w行，分成Collision, Commonn, Dynamics和Rope四部分，关于一些基本概念和上述模块的作用和关系在 ["Box2D的手册":http://box2d.org/manual.pdf] 里说明的非常清楚，一定要看～

<pre class = "table">
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
C++                             46           2182           1834           9669
C/C++ Header                    47           1412           2115           3910
CMake                            2              6              4            200
-------------------------------------------------------------------------------
SUM:                            95           3600           3953          13779
-------------------------------------------------------------------------------
</pre>

p. 

另外需要提起的是，Box2D的注释非常详细：大家可以看到在本文的第一张图里面看到注释里的 Position Correction Notes部分，作者把实现过程中尝试了的算法和思考过程都写了进去，一些数值优化的部分也做了关键性的注释，所以说注释的部分也包含了很大的信息量！

h1. 内存管理

h2. 内存池（Block Allocator）

如果程序里出现频繁的动态分配和释放许多小额的内存区块时，有两个很严重的性能问题就出现了：
* 内存碎片的问题。
* 内存浪费，在C++中，动态申请一块内存时会额外附带一个cookie，用来记录这块内存的信息，就像交给系统的税一样，申请的内存区块越小，这个税的比重就越大，内存的使用率就越低。

Block Allocator 的做法是，定义一个区块大小的临界值 b2_maxBlockSize， 如果申请的内存大于这个临界值，就直接使用 malloc 分配，如果小于临界值，则以内存池的形式管理这些小额的区块。

* 将动态分配的小额区块划分到不同的区间上，对于每种大小的内存快，维护一个尚未被占用的区块链表 m_freeLists， 

{% highlight cpp linenos linenostart=49 %}
private:
	/* 内存池 */
	b2Chunk* m_chunks;
	int32 m_chunkCount;
	int32 m_chunkSpace;
	/* 每个内存区间的空闲区块链表 */
	b2Block* m_freeLists[b2_blockSizes];
	/* 可以分配的区块大小 */
	static int32 s_blockSizes[b2_blockSizes];
	static uint8 s_blockSizeLookup[b2_maxBlockSize + 1];
	static bool s_blockSizeLookupInitialized;
{% endhighlight %}

p.  

* 分配内存时，如果需求量大于临界值（b2_maxBlockSize），则直接用 malloc 分配内存

{% highlight cpp linenos linenostart=97 %}
void* b2BlockAllocator::Allocate(int32 size)
{
    if (size == 0)
        return NULL;

    b2Assert(0 < size);

    if (size > b2_maxBlockSize)
    {
        return b2Alloc(size);
    }
    /* ... */
}
{% endhighlight %}

p.  

* 否则，将内存需求量上调的对应的区间上，去对应区间的free list上查找空闲的内存区块，如果有，就直接返回

{% highlight cpp linenos linenostart=109 %}
/* 小额区块，查找 free list */
    int32 index = s_blockSizeLookup[size];
    b2Assert(0 <= index && index < b2_blockSizes);

    if (m_freeLists[index])
    {
        b2Block* block = m_freeLists[index];
        m_freeLists[index] = block->next;
        return block;
    }
{% endhighlight %}

p.  

* 如果当前的free list 没有空闲的区块时，就需要从内存池中切出部分内存块填充到 free list里
* 最差的情况，内存池也完全用光了，这时候就需要在堆上再 malloc 出一块较大的内存区块补充到内存池里

{% highlight cpp linenos linenostart=118 %}
/* 从内存池中切出内存补充到 free list 里*/
    else
    {
        if (m_chunkCount == m_chunkSpace)
        {
            b2Chunk* oldChunks = m_chunks;
            m_chunkSpace += b2_chunkArrayIncrement;
            m_chunks = (b2Chunk*)b2Alloc(m_chunkSpace * sizeof(b2Chunk));
            memcpy(m_chunks, oldChunks, m_chunkCount * sizeof(b2Chunk));
            memset(m_chunks + m_chunkCount, 0, b2_chunkArrayIncrement * sizeof(b2Chunk));
            b2Free(oldChunks);
        }

        b2Chunk* chunk = m_chunks + m_chunkCount;
        chunk->blocks = (b2Block*)b2Alloc(b2_chunkSize);
#if defined(_DEBUG)
        memset(chunk->blocks, 0xcd, b2_chunkSize);
#endif
        int32 blockSize = s_blockSizes[index];
        chunk->blockSize = blockSize;
        int32 blockCount = b2_chunkSize / blockSize;
        b2Assert(blockCount * blockSize <= b2_chunkSize);
        for (int32 i = 0; i < blockCount - 1; ++i)
        {
            b2Block* block = (b2Block*)((int8*)chunk->blocks + blockSize * i);
            b2Block* next = (b2Block*)((int8*)chunk->blocks + blockSize * (i + 1));
            block->next = next;
        }
        b2Block* last = (b2Block*)((int8*)chunk->blocks + blockSize * (blockCount - 1));
        last->next = NULL;

        m_freeLists[index] = chunk->blocks->next;
        ++m_chunkCount;

        return chunk->blocks;
    }
}
{% endhighlight %}


h2. 栈式分配（Stack Allocator）

在每一帧的碰撞的检测阶段，需要分配大量的内存，当检测完毕之后需要释放这些内存，在这种请路况下，栈式的内存分配机制就会起到很大的作用。

首先一次性分配一段连续的，足够大的内存，按照栈底到栈顶的顺序依次分配内存，释放内存的时候按照相反的方向归还内存快。

<div class="figure">
<img src="/data/stack_allocator.png">
</div>

实现是很简单的，用一个指针指向已经被使用的内存的栈顶，在申请一块内存时，从当前的栈顶位置开始，切走一块内存，更新栈顶的位置，释放内存时，只要简单的把栈顶向下移动对应内存快的大小即可

* 用一个字符串数组 m_data ，在栈上分配出一块连续的大块内存：

{% highlight cpp linenos linenostart=37%}
class b2StackAllocator
{
public:
	b2StackAllocator();
	~b2StackAllocator();

	void* Allocate(int32 size);
	void Free(void* p);

	int32 GetMaxAllocation() const;

private:
	// 栈上分配的数组
	char m_data[b2_stackSize];
	int32 m_index;

	int32 m_allocation;
	int32 m_maxAllocation;

	// 记录所有分配出去的内存块信息
	b2StackEntry m_entries[b2_maxStackEntries];
	int32 m_entryCount;
};
{% endhighlight %}

p. 

* 结构体 b2StackEntry 用来记录当前已经分配出去的内存块信息

{% highlight cpp linenos linenostart=30%}
struct b2StackEntry
{
	char* data;
	int32 size;
	// 标记这块内存是动态分配的还是从m_data数组里切出来的
	bool usedMalloc;
};
{% endhighlight %}

p.  

* 分配内存，如果申请的内存大小超过了 m_data 中没有被使用的部分，则在堆上动态分配一块出来
* 释放内存，如果不是动态分配的就归还到 m_data 数组里

h1. 碰撞系统
